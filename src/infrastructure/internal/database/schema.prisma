// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id      Int     @id @default(autoincrement())
  name    String?
  address String?
  users   User[]
}

model User {
  id               Int         @id @default(autoincrement())
  firstName        String
  lastName         String
  phoneNumber      String
  email            String      @unique
  password         String
  hasVerified      Boolean     @default(false)
  isFirstTimeLogin Boolean     @default(true)
  lastLoginDate    DateTime    @default(now())
  roleId           Int?
  role             Role?        @relation(fields: [roleId], references: [id])
  tenantId         Int
  tenant           Tenant      @relation(fields: [tenantId], references: [id])
  tokens           UserToken[]
  studentId        String?
  student          Student?    @relation(fields: [studentId], references: [studentId])
  staffId          String?
  staff            Staff?      @relation(fields: [staffId], references: [staffId])
}

model Group {
  id       Int     @id @default(autoincrement())
  groupId  String  @unique @default(uuid())
  name     String
  staff    Staff[] @relation("StaffGroup")
  tenantId Int
}

model Staff {
  id       Int       @id @default(autoincrement())
  staffId  String    @unique @default(uuid())
  jobTitle String
  group    Group[]   @relation("StaffGroup")
  classes  Class[]   @relation("ClassTeacher")
  subjects Subject[] @relation("SubjectTeacher")
  User     User[]
}

model Role {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  permission Permission[] @relation("RolePermission")
  users      User[]
  tenantId   Int
}

model Permission {
  id       Int    @id @default(autoincrement())
  name     String @unique
  role     Role[] @relation("RolePermission")
  tenantId Int
}

model Student {
  id               Int      @id @default(autoincrement())
  studentId        String   @unique @default(uuid())
  dob              DateTime
  address          String
  enrollmentDate   DateTime
  classId          String
  class            Class    @relation(fields: [classId], references: [classId])
  tenantId         Int
  User             User[]
}

model Class {
  id             Int       @id @default(autoincrement())
  classId        String    @unique @default(uuid())
  name           ClassList
  classTeacherId String?
  classTeacher   Staff?    @relation("ClassTeacher", fields: [classTeacherId], references: [staffId])
  students       Student[]
  subjects       Subject[] @relation("ClassSubjects")
  tenantId       Int
}

model Subject {
  id        Int    @id @default(autoincrement())
  subjectId String @unique @default(uuid())
  name      String
  classId   String
  teacherId String
  class     Class  @relation("ClassSubjects", fields: [classId], references: [classId])
  teacher   Staff  @relation("SubjectTeacher", fields: [teacherId], references: [staffId])
  tenantId  Int
}

enum ClassList {
  JSS1
  JSS2
  JSS3
  SSS1
  SSS2
  SSS3
}

model UserToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  tokenType TokenType
  token     String
  expiresAt DateTime
  expired   Boolean   @default(false)
  isActive  Boolean   @default(true)
}

enum TokenType {
  EMAIL
  ACCESS
  REFRESH
  PASSWORD_RESET
}
