// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id                      Int                        @id @default(autoincrement())
  name                    String?
  address                 String?
  type                    String?
  registrationNo          String?
  contactEmail            String?
  contactPhone            String?
  establishedDate         DateTime?
  logoUrl                 String?
  stateId                 Int?
  lgaId                   Int?
  countryId               Int?
  zipCode                 Int?
  postalCode              String?
  onboardingStatus        TenantOnboardingStatusType @default(PERSONAL)
  users                   User[]
  metadata                TenantMetadata?
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
  staffs                  Staff[]
  students                Student[]
  userTokens              UserToken[]
  roles                   Role[]
  permissions             Permission[]
  groups                  Group[]
  classes                 Class[]
  subjects                Subject[]
  studentGroups           StudentGroup[]
  guardians               Guardian[]
  dormitories             Dormitory[]
  medicalHistories        MedicalHistory[]
  documents               Document[]
  documentTypes           DocumentType[]
  classDivisions          ClassDivision[]
  schoolCalendars         SchoolCalendar[]
  terms                   Term[]
  breakPeriods            BreakPeriod[]
  timetables              Timetable[]
  periods                 Period[]
  gradingStructures       TenantGradingStructure[]
  subjectGradingStructure SubjectGradingStructure[]
  subjectGrading          SubjectGrading[]
}

enum TenantOnboardingStatusType {
  PERSONAL
  RESIDENTIAL
  SCHOOL
  COMPLETE
}

model TenantMetadata {
  id            Int    @id @default(autoincrement())
  tenantId      Int    @unique
  totalStudents Int?
  totalStaff    Int?
  tenant        Tenant @relation(fields: [tenantId], references: [id])
}

model User {
  id                   Int         @id @default(autoincrement())
  firstName            String
  lastName             String
  gender               String?
  dateOfBirth          DateTime?
  phoneNumber          String
  religion             String?
  bloodGroup           String?
  email                String
  password             String
  hasVerified          Boolean     @default(false)
  isFirstTimeLogin     Boolean     @default(true)
  lastLoginDate        DateTime    @default(now())
  tokens               UserToken[]
  userType             UserType    @default(STAFF)
  tenantId             Int
  tenant               Tenant      @relation(fields: [tenantId], references: [id])
  student              Student?    @relation("StudentUser")
  staff                Staff?      @relation("StaffUser")
  createdAt            DateTime    @default(now())
  residentialAddress   String?
  residentialLgaId     Int?
  residentialStateId   Int?
  residentialCountryId Int?
  residentialZipCode   Int?

  @@unique([email, tenantId])
}

enum UserType {
  STUDENT
  STAFF
}

model Staff {
  id                      Int                       @id @default(autoincrement())
  jobTitle                String
  userId                  Int                       @unique
  user                    User                      @relation(fields: [userId], references: [id], name: "StaffUser")
  roleId                  Int?
  role                    Role?                     @relation(fields: [roleId], references: [id])
  group                   Group[]                   @relation("StaffGroup")
  classDivisions          ClassDivision[]           @relation("ClassDivisionTeacher")
  subjects                Subject[]                 @relation("SubjectTeacher")
  tenantId                Int
  nin                     String?
  tin                     String?
  cvUrl                   String?
  highestLevelEdu         String?
  employmentType          StaffEmploymentType       @default(FULLTIME)
  startDate               DateTime                  @default(now())
  tenant                  Tenant                    @relation(fields: [tenantId], references: [id])
  subjectGradingStructure SubjectGradingStructure[]
}

enum StaffEmploymentType {
  FULLTIME
  PARTTIME
  CONTRACT
  INTERNSHIP
}

model Student {
  id              Int              @id @default(autoincrement())
  enrollmentDate  DateTime         @default(now())
  admissionNo     String?
  guardians       Guardian[]       @relation("StudentGuardian")
  documents       Document[]
  dormitoryId     Int?
  dormitory       Dormitory?       @relation(fields: [dormitoryId], references: [id])
  medicalHistory  MedicalHistory[]
  studentGroups   StudentGroup[]   @relation("StudentGroupRelation")
  classId         Int?
  class           Class?           @relation(fields: [classId], references: [id])
  subjects        Subject[]        @relation("StudentSubject")
  classDivisionId Int?
  classDivision   ClassDivision?   @relation(fields: [classDivisionId], references: [id])
  userId          Int              @unique
  user            User             @relation(fields: [userId], references: [id], name: "StudentUser")
  tenantId        Int
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  subjectGrades   SubjectGrading[]

  @@unique([admissionNo, tenantId])
}

model Class {
  id                Int                      @id @default(autoincrement())
  name              ClassList?
  students          Student[]
  subjects          Subject[]
  divisions         ClassDivision[]
  tenantId          Int
  tenant            Tenant                   @relation(fields: [tenantId], references: [id])
  subjectGrades     SubjectGrading[]
  gradingStructures TenantGradingStructure[] @relation("TenantGradingStructureClass")
}

enum ClassList {
  JSS1
  JSS2
  JSS3
  SSS1
  SSS2
  SSS3
}

model ClassDivision {
  id                     Int              @id @default(autoincrement())
  name                   String
  classId                Int
  class                  Class            @relation(fields: [classId], references: [id])
  classDivisionTeacherId Int?
  classDivisionTeacher   Staff?           @relation("ClassDivisionTeacher", fields: [classDivisionTeacherId], references: [id])
  students               Student[]
  tenantId               Int
  tenant                 Tenant           @relation(fields: [tenantId], references: [id])
  timetables             Timetable[]
  SubjectGrading         SubjectGrading[]
}

model Subject {
  id               Int                      @id @default(autoincrement())
  name             String
  description      String?
  staffs           Staff[]                  @relation("SubjectTeacher")
  tenantId         Int
  tenant           Tenant                   @relation(fields: [tenantId], references: [id])
  classId          Int
  class            Class                    @relation(fields: [classId], references: [id])
  periods          Period[]
  students         Student[]                @relation("StudentSubject")
  gradingStructure SubjectGradingStructure?
  subjectGrades    SubjectGrading[]
}

model Guardian {
  id                   Int       @id @default(autoincrement())
  firstName            String    @default("")
  lastName             String    @default("")
  phoneNumber          String    @default("")
  email                String?
  gender               String?
  dateOfBirth          DateTime?
  residentialAddress   String?
  residentialStateId   Int?
  residentialLgaId     Int?
  residentialCountryId Int?
  residentialZipCode   Int?
  students             Student[] @relation("StudentGuardian")
  tenantId             Int
  tenant               Tenant    @relation(fields: [tenantId], references: [id])

  @@unique([email, tenantId])
}

// ==================== AUTHENTICATION TABLES START ==================== //

model UserToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  tokenType TokenType
  token     String
  expiresAt DateTime
  expired   Boolean   @default(false)
  isActive  Boolean   @default(true)
  tenant    Tenant?   @relation(fields: [tenantId], references: [id])
  tenantId  Int?
}

enum TokenType {
  EMAIL
  ACCESS
  REFRESH
  PASSWORD_RESET
}

// ==================== AUTHENTICATION TABLES END ==================== //

// ==================== SCHOOL CALENDAR TABLES START ==================== //

model SchoolCalendar {
  id           Int              @id @default(autoincrement())
  year         Int
  terms        Term[]
  tenantId     Int
  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  SubjectGrade SubjectGrading[]

  @@unique([year, tenantId])
}

model Term {
  id           Int              @id @default(autoincrement())
  name         String // e.g., "First Term", "Second Term"
  startDate    DateTime
  endDate      DateTime
  breakWeeks   BreakPeriod[]
  calendarId   Int
  calendar     SchoolCalendar   @relation(fields: [calendarId], references: [id])
  tenantId     Int
  tenant       Tenant           @relation(fields: [tenantId], references: [id])
  timetable    Timetable[]
  subjectGrade SubjectGrading[]
}

model BreakPeriod {
  id        Int      @id @default(autoincrement())
  name      String // e.g., "Mid-Term Break", "Exam Week"
  startDate DateTime
  endDate   DateTime
  termId    Int
  term      Term     @relation(fields: [termId], references: [id])
  tenantId  Int
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
}

// ==================== SCHOOL CALENDAR TABLES END ==================== //

// ==================== TIMETABLE TABLES START ==================== //

model Timetable {
  id              Int           @id @default(autoincrement())
  day             Weekday
  termId          Int?
  term            Term?         @relation(fields: [termId], references: [id])
  periods         Period[]
  classDivisionId Int
  classDivision   ClassDivision @relation(fields: [classDivisionId], references: [id])
  tenantId        Int
  tenant          Tenant        @relation(fields: [tenantId], references: [id])
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

model Period {
  id          Int        @id @default(autoincrement())
  startTime   String // "08:00"
  endTime     String // "08:15"
  subjectId   Int?
  subject     Subject?   @relation(fields: [subjectId], references: [id])
  timetableId Int
  timetable   Timetable  @relation(fields: [timetableId], references: [id])
  isBreak     Boolean    @default(false)
  breakType   BreakType?
  tenantId    Int
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
}

enum BreakType {
  SHORTBREAK
  LONGBREAK
}

// ==================== TIMETABLE TABLES END ==================== //

// ==================== ROLES AND PERMISSIONS TABLES START ==================== //

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[] @relation("RolePermission")
  staff       Staff[]
  tenantId    Int
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
}

model Permission {
  id       Int    @id @default(autoincrement())
  name     String
  roles    Role[] @relation("RolePermission")
  tenantId Int
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@unique([name, tenantId])
}

// ==================== ROLES AND PERMISSIONS TABLES END ==================== //

// ==================== GRADING SYSTEM TABLES START ==================== //

model TenantGradingStructure {
  id                         Int                       @id @default(autoincrement())
  tenantId                   Int
  name                       String
  continuousAssessmentWeight Int
  examWeight                 Int
  classes                    Class[]                   @relation("TenantGradingStructureClass")
  tenant                     Tenant                    @relation(fields: [tenantId], references: [id])
  subjectGradingStructures   SubjectGradingStructure[]
  gradeBoundaries            GradeBoundary[]
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt
}

model GradeBoundary {
  id                       Int                    @id @default(autoincrement())
  tenantGradingStructureId Int
  minimumScore             Int
  maximumScore             Int
  grade                    String
  remark                   String
  tenantGradingStructure   TenantGradingStructure @relation(fields: [tenantGradingStructureId], references: [id])
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
}

model SubjectGradingStructure {
  id                                 Int                                 @id @default(autoincrement())
  tenantId                           Int
  subjectId                          Int                                 @unique
  staffId                            Int
  tenantGradingStructureId           Int
  subject                            Subject                             @relation(fields: [subjectId], references: [id])
  staff                              Staff                               @relation(fields: [staffId], references: [id])
  tenantGradingStructure             TenantGradingStructure              @relation(fields: [tenantGradingStructureId], references: [id])
  continuousAssessmentBreakdownItems ContinuousAssessmentBreakdownItem[]
  tenant                             Tenant                              @relation(fields: [tenantId], references: [id])
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
}

model ContinuousAssessmentBreakdownItem {
  id                        Int                     @id @default(autoincrement())
  name                      String
  weight                    Int
  subjectGradingStructureId Int
  subjectGradingStructure   SubjectGradingStructure @relation(fields: [subjectGradingStructureId], references: [id])
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
}

model SubjectGrading {
  id                         Int                         @id @default(autoincrement())
  tenantId                   Int
  studentId                  Int
  subjectId                  Int
  classId                    Int
  classDivisionId            Int
  calendarId                 Int
  termId                     Int
  continuousAssessmentScores ContinuousAssessmentScore[]
  totalContinuousScore       Float                       @default(0)
  examScore                  Float                       @default(0)
  totalScore                 Float                       @default(0)
  grade                      String
  remark                     String?
  student                    Student                     @relation(fields: [studentId], references: [id])
  subject                    Subject                     @relation(fields: [subjectId], references: [id])
  class                      Class                       @relation(fields: [classId], references: [id])
  classDivision              ClassDivision               @relation(fields: [classDivisionId], references: [id])
  calendar                   SchoolCalendar              @relation(fields: [calendarId], references: [id])
  term                       Term                        @relation(fields: [termId], references: [id])
  tenant                     Tenant                      @relation(fields: [tenantId], references: [id])
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt

  @@unique([studentId, subjectId, calendarId, termId])
}

model ContinuousAssessmentScore {
  id               Int            @id @default(autoincrement())
  name             String
  score            Float
  subjectGradingId Int
  subjectGrading   SubjectGrading @relation(fields: [subjectGradingId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

// ==================== GRADING SYSTEM TABLES END ==================== //

// ==================== NOT IN USE YET ==================== //
model StudentGroup {
  id       Int       @id @unique @default(autoincrement())
  name     String
  students Student[] @relation("StudentGroupRelation")
  tenantId Int
  tenant   Tenant    @relation(fields: [tenantId], references: [id])
}

model Dormitory {
  id       Int       @id @default(autoincrement())
  name     String
  students Student[]
  tenantId Int
  tenant   Tenant    @relation(fields: [tenantId], references: [id])
}

model MedicalHistory {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  studentId   Int
  student     Student @relation(fields: [studentId], references: [id])
  tenantId    Int
  tenant      Tenant  @relation(fields: [tenantId], references: [id])
}

model Document {
  id             Int          @id @default(autoincrement())
  name           String
  url            String
  studentId      Int?
  student        Student?     @relation(fields: [studentId], references: [id])
  documentTypeId Int
  documentType   DocumentType @relation(fields: [documentTypeId], references: [id])
  tenantId       Int
  tenant         Tenant       @relation(fields: [tenantId], references: [id])
}

model DocumentType {
  id       Int        @id @default(autoincrement())
  name     String
  document Document[]
  tenantId Int
  tenant   Tenant     @relation(fields: [tenantId], references: [id])
}

model Group {
  id       Int     @id @default(autoincrement())
  name     String
  staff    Staff[] @relation("StaffGroup")
  tenantId Int
  tenant   Tenant  @relation(fields: [tenantId], references: [id])
}

// ==================== NOT IN USE YET ==================== //
